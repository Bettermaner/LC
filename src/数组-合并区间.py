# 输入：intervals = [[1,3],[2,6],[8,10],[15,18]]
# 输出：[[1,6],[8,10],[15,18]]
# 解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].

# 解题思路
 # 第一步：排序
# 按照每个区间的**左端点（起始位置）**从小到大进行排序。
# 这样可以确保后续遍历时，重叠或相邻的区间是连续出现的。

# 第二步：合并区间
# 维护一个结果列表 merge，初始为空。
# 依次遍历排序后的所有区间 inter：
# 如果 merge 是空 或者 当前区间的起点大于 merge 中最后一个区间的终点，说明没有重叠，将当前区间加入 merge。
# 否则，说明当前区间与上一个区间有重叠，需要合并它们的右边界（取两个区间的右端点的最大值）。
# 时间复杂度	O(n log n)
# 空间复杂度	O(n)

def func(array):
    # 首先先按照每个区间的左边界从小到大的排序
    array.sort(key=lambda x:x[0])

    merge = []

    for inter in array:
        if not merge or merge[-1][1] < inter[0]:
            merge.append(inter)
        else:
            merge[-1][1] = max(merge[-1][1],inter[1])

    return merge

print(func([[1,3],[2,6],[8,10],[15,18]]))