# 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
# 影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

# 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

# 输入：[1,2,3,1]
# 输出：4
# 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
#      偷窃到的最高金额 = 1 + 3 = 4 。

# 解法
    # 动态规划
    # dp[i] = max(dp[i-2] + array[i], dp[i-1])
    # 边界条件： dp[0] = array[0], dp[1] = max(array[0],array[1])

class Solution:
    def rob(self, nums) -> int:
        if not nums:
            return 0

        size = len(nums)
        if size == 1:
            return nums[0]
        
        dp = [0] * size
        dp[0] = nums[0]
        dp[1] = max(nums[0], nums[1])
        for i in range(2, size):
            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])
        
        return dp[size - 1]



# 打家劫舍2
# 小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为 root 。

# 除了 root 之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，
# 聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果 两个直接相连的房子在同一天晚上被打劫 ，房屋将自动报警。

# 给定二叉树的 root 。返回 在不触动警报的情况下 ，小偷能够盗取的最高金额 。

# 输入: root = [3,4,5,1,3,null,1]
# 输出: 9
# 解释: 小偷一晚能够盗取的最高金额 4 + 5 = 9

# 解题思路
    # 动态规划

    # 简化一下这个问题：一棵二叉树，树上的每个点都有对应的权值，每个点有两种状态（选中和不选中），
    # 问在不能同时选中有父子关系的点的情况下，能选中的点的最大权值和是多少。

    # 我们可以用 f(o) 表示选择 o 节点的情况下，o 节点的子树上被选择的节点的最大权值和；
    # g(o) 表示不选择 o 节点的情况下，o 节点的子树上被选择的节点的最大权值和；
    # l 和 r 代表 o 的左右孩子。

    # 当 o 被选中时，o 的左右孩子都不能被选中，故 o 被选中情况下子树上被选中点的最大权值和为 l 和 r 不被选中的最大权值和相加，
    # 即 f(o) = g(l)+g(r)。
    
    # 当 o 不被选中时，o 的左右孩子可以被选中，也可以不被选中。对于 o 的某个具体的孩子 x，它对 o 的贡献是 x 被选中和不被选中情况下权值和的较大值。
    # 故 g(o) = max { f(l) , g(l)} + max{ f(r) , g(r) }。

    # 至此，我们可以用哈希表来存 f 和 g 的函数值，用深度优先搜索的办法后序遍历这棵二叉树，
    # 我们就可以得到每一个节点的 f 和 g。
    # 根节点的 f 和 g的最大值就是我们要找的答案。


def func(root):

    f = {}
    g = {}

    def dfs(root):
        if not root:
            return

        dfs(root.left)
        dfs(root.right)

        f[root] = f.get(root,0) + g.get(root.left,0) + g.get(root.right,0) 
        g[root] = max(f.get(root.left,0),g.get(root.left,0)) + max(f.get(root.right,0),g.get(root.right,0))
     

    dfs(root)

    return max(f.get(root,0),g.get(root,0))