# 两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。

# 给你两个整数 x 和 y，计算并返回它们之间的汉明距离。

# 输入：x = 1, y = 4
# 输出：2
# 解释：
# 1   (0 0 0 1)
# 4   (0 1 0 0)
#        ↑   ↑
# 上面的箭头指出了对应二进制位不同的位置。

# 解题思路
# n & n-1 的值是 去掉二进制n最右边1的值；
# 比如 1010 & 1001 = 1000；用这个可以非常优雅的计算一个数里面的1的个数！

# 这个题目虽然简单，收获这个位运算的小技巧还是不错的。
# 就是求两个数的二进制形式上，不同的二进制位数，也就是汉明距离
# 比如 1000 和 1101 只有两位不同，汉明距离就是2

# 解题方法就是：两数异或（不同位为1），剩下二进制为1的就是不同的二进制位，统计1个数即汉明距离；
# 要对比两个数二进制形态不同的位数，想到使用异或位运算，各位运算后相同的为0，不同的为1。

class Solution:
    def hammingDistance(self, x, y):
        res, cnt = x ^ y, 0
        while res:
            res = res & (res - 1)
            cnt = cnt + 1
        return cnt