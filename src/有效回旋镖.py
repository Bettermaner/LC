#给定一个数组 points ，其中 points [ i ] = [ xi, yi ] 表示 X-Y 平面上的一个点，如果这些点构成一个回旋镖则返回 true 。

#回旋镖定义为一组三个点，这些点各不相同且不在一条直线上 。

#示例 1 :

#输入：points = [[1,1],[2,3],[3,2]]
#输出：true
#示例 2 :

#输入：points = [[1,1],[2,2],[3,3]]
#输出：false

# 解题思路
# 思路和算法计算从 points [0] 开始，分别指向 points [1] 和 points [2] 的向量 V1 和 V2 。「三点各不相同且不在一条直线上」等价于「这两个向量的叉乘结果不为零」： v1 + v2 ≠ 0
#「三点各不相同且不在一条直线上」等价于「这两个向量的叉乘结果不为零」这一结论基于向量叉乘的几何意义。让我们详细解释一下这个概念：
## 尽管严格来说，叉乘的结果是一个向量，并且通常用于三维空间中，但在二维情况下，我们可以将其视为一个标量，表示这两个向量构成的平行四边形的有向面积。


##几何解释
## 共线情况：如果两点和原点形成的向量共线，则它们之间的叉乘结果为0。这是因为当两个向量共线时，它们构成的平行四边形退化为一条线段，因此面积为0。
## 非共线情况：如果两个向量不共线，那么它们构成的平行四边形有一个非零的面积，这意味着叉乘的结果不为0。

# A = [1,1], B = [2,3], C = [3,2]
# 因此 ，向量 V1 是从点A到点B,即 （xb-xa,yb-xa） ,向量 V2 是从点A到点C,即 （xc-xa,yc-xa） 
# 计算这两个向量的叉乘：V1* V2 = (xb-xa)(yc-xa) - (yb-xa)(yc-xa)

class Solution:
    def isBoomerang(self,points) -> bool:
        v1 = (points[1][0] - points[0][0], points[1][1] - points[0][1])
        v2 = (points[2][0] - points[0][0], points[2][1] - points[0][1])
        return v1[0] * v2[1] - v1[1] * v2[0] != 0