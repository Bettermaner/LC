# 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

# 有效字符串需满足：

# 左括号必须用相同类型的右括号闭合。
# 左括号必须以正确的顺序闭合。
# 每个右括号都有一个对应的相同类型的左括号。

# 示例 1：

# 输入：s = "()"
# 输出：true
# 示例 2：

# 输入：s = "()[]{}"
# 输出：true
# 示例 3：

# 输入：s = "(]"
# 输出：false

# 解题思路
    # 辅助栈，先进后出的原则
    # 栈先入后出特点恰好与本题括号排序特点一致，即若遇到左括号入栈，
    # 遇到右括号时将对应栈顶左括号出栈，则遍历完所有括号后 stack 仍然为空；

    # 栈 stack 为空： 此时 stack.pop() 操作会报错；
    # 因此，我们采用一个取巧方法，给 stack 赋初值 ?? ，并在哈希表 dic 中建立 key: '?'，value:'?'key: 
    # 的对应关系予以配合。此时当 stack 为空且 c 为右括号时，可以正常提前返回 false；

def func(s):
    map = {'(':')','[':']','{':'}','?':"?"}

    stack = ['?']

    for _ in s:
        if _ in map:
            stack.append(_)
        else:
            left = stack.pop()
            right = map[left]
            if right != _:
                return False
                
    return len(stack) == 1 
