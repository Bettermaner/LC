# 你正在玩一个单人游戏，面前放置着大小分别为 a、b 和 c 的 三堆 石子。
# 每回合你都要从两个 不同的非空堆 中取出一颗石子，并在得分上加 1 分。当存在 两个或更多 的空堆时，游戏停止。
# 给你三个整数 a 、b 和 c ，返回可以得到的 最大分数 ，这个是怎么解

# 输入：a = 2, b = 4, c = 6
# 输出：6
# 解释：石子起始状态是 (2, 4, 6) ，最优的一组操作是：
# - 从第一和第三堆取，石子状态现在是 (1, 4, 5)
# - 从第一和第三堆取，石子状态现在是 (0, 4, 4)
# - 从第二和第三堆取，石子状态现在是 (0, 3, 3)
# - 从第二和第三堆取，石子状态现在是 (0, 2, 2)
# - 从第二和第三堆取，石子状态现在是 (0, 1, 1)
# - 从第二和第三堆取，石子状态现在是 (0, 0, 0)
# 总分：6 分 。

# 分析
# 假设三堆石子的大小分别为 a,b,c 。为了使得分最大化，我们需要尽可能多地进行取石子的操作。关键在于理解当一个堆变为空时，剩余的两堆石子如何继续进行游戏直到不能再进行为止。


# 主要策略：
# 排序：首先对 a,b,c 进行排序（不妨设 a≤b≤c），这样便于后续分析。
# 情况分析：
# 1. 如果最小的两堆之和小于等于最大的那一堆（即a+b≤c），那么最大得分为 a+b。因为你可以一直从这三堆中取出石子，直到其中两堆变为0，此时第三堆剩下的石子无法再配对取出。
# 2. 如果最小的两堆之和大于最大的那一堆（即 a+b>c），那么最大得分为 (a+b+c)/2（向下取整）。在这种情况下，所有的石子都可以被成对地取出，直到剩余的石子不足以构成一对（如果总数为奇数，则最后会剩下一颗石子）。

def maxScore(a, b, c):
    # 对输入的三个数字进行排序
    a, b, c = sorted([a, b, c])
    
    # 情况分析
    if a + b <= c:
        return a + b
    else:
        return (a + b + c) // 2

# 示例
print(maxScore(2, 4, 6))  # 输出应该是5
print(maxScore(3, 3, 3))  # 输出应该是4