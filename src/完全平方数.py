# 给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。

# 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。
# 例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

# 解题思路 
    # 动态规划
    # 我们可以依据题目的要求写出状态表达式：f[i] 表示最少需要多少个数的平方来表示整数 i
    # 这些数必然落在区间 [1,sqrt{i}]。
    # 我们可以枚举这些数，假设当前枚举到 j，那么我们还需要取若干数的平方，构成 i-j^2 

    # 此时我们发现该子问题和原问题类似，只是规模变小了。这符合了动态规划的要求，于是我们可以写出状态转移方程。

    # dp[i] = min(dp[i-j**2] + 1) ,j在[1,sqrt{i}]区间


def func(n):
    
    dp = [0 for i in range(n+1)]

    for i in range(1,n+ 1):
        
        value = float('inf')
        j = 1
        while j ** 2 <= i:
            value = min(value,dp[i-j**2])
            j += 1
        
        dp[i] = value + 1

    return dp[n]

print(func(13))